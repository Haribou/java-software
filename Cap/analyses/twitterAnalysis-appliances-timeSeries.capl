# Determine key metrics for a given Twitter data collection.

settings: 			

debug:																									false,
recording:																								false,
expires:																								180 * 24 * 60;
	
constants:	

BUSINESSES:																								set[]("SiemensHome","SiemensHomeDE","SiemensHomeUK","BoschHomeUS","BoschHomeDE","BoschHomeUK","NEFFHomeUK","gaggenau","Gaggenau_US","WhirlpoolCorp","whirlpoolusa","WhirlpoolUK","WhirlpoolCare","MieleProf","MieleUSA","Miele_GB"),

WATCH_WORDS:																							set[]("army","aggression","aggressor","russia","ukrain","war","invasion","invade","destroy","soldier","weapons","criminals","putin","shame","blood","ban","civilians","kill","terrorist","boycott","murder","genocide","destroy","peace","bomb","die","crime"),

TOP_PCT: 																								5,
EVENT_WINDOW:																							100000,
TIME_INTERVAL_LENGTH_MS:																				24 * 60 * 60000,
MIN_TWEET_LENGTH:																						10;

variables:

retweet:																								false,
hasExtendedText:																						false,
tweet:																									"",
tweets: 																								list[],
tweetsInTimeIntervals:																					list[],
allTweets:																								list[EVENT_WINDOW],
tweeters:																								set[],
tweetersList:																							list[],
allTweeters:																							set[EVENT_WINDOW],
allTweetersList:																						list[EVENT_WINDOW],
eligibleCustomerTweet:																					false,
numEligibleCustomerTweets:																				0,
tweetDistribution:																						map[EVENT_WINDOW],
numTweetsWithWatchWords:																				0,
numAllTweetsWithWatchWords:																				0,
userMentions:																							0,
firstTimestamp:																							@["timestamp_ms"] stringToNumber,
timeWindow:																								0,
newTimeWindow:																							0,
timeWindowRollover:																						false,
topTweeters:																							list[],
record:																									map[];

updateRules:

retweet::	 																							@["retweeted_status"] exists,
hasExtendedText:: 																						!retweet & @["extended_tweet"] exists,
tweet: 							hasExtendedText: 														@["extended_tweet"]["full_text"],
tweet: 							!hasExtendedText: 														@["text"],
eligibleCustomerTweet::																					!retweet & !BUSINESSES contains(@["user"]["screen_name"]) & tweet count > MIN_TWEET_LENGTH,
numEligibleCustomerTweets:		eligibleCustomerTweet:													numEligibleCustomerTweets + 1,
: 								eligibleCustomerTweet: 													tweets add(tweet),
: 								eligibleCustomerTweet: 													allTweets add(tweet),
numTweetsWithWatchWords:		eligibleCustomerTweet & tweet containsSome?(WATCH_WORDS):				numTweetsWithWatchWords + 1,
numAllTweetsWithWatchWords:		eligibleCustomerTweet & tweet containsSome?(WATCH_WORDS):				numAllTweetsWithWatchWords + 1,
userMentions:					eligibleCustomerTweet:													userMentions + @["entities"]["user_mentions"]["screen_name"] count,
:								eligibleCustomerTweet:													tweeters add(@["user"]["screen_name"]),
:								eligibleCustomerTweet:													tweetersList add(@["user"]["screen_name"]),
:								eligibleCustomerTweet:													allTweeters add(@["user"]["screen_name"]),
:								eligibleCustomerTweet:													allTweetersList add(@["user"]["screen_name"]),
newTimeWindow::																							@["timestamp_ms"] numberToTimeWindow(firstTimestamp, TIME_INTERVAL_LENGTH_MS),
timeWindowRollover::																					timeWindow < newTimeWindow,				
:								timeWindowRollover:														tweetsInTimeIntervals add(tweets count),
:								timeWindowRollover:														record add("timeInterval": (firstTimestamp + newTimeWindow * TIME_INTERVAL_LENGTH_MS) numberToDate("yyyy-MM-dd HH:mm:ss")),
:								timeWindowRollover:														record add("numCustomerTweets": tweets count),
:								timeWindowRollover:														record add("numTweeters": tweeters count),
:								timeWindowRollover & tweeters count > 0:								record add("tweetsPerTweeter": tweets count / tweeters count),
topTweeters:					timeWindowRollover:														tweetersList top(TOP_PCT, pct),
:								timeWindowRollover:														record add("topTweeters": topTweeters),
:								timeWindowRollover & tweets count > 0:									record add("topTweeterPercentage": 100 * (topTweeters["f"] sum / tweets count) + "%"),
:								timeWindowRollover:														record add("pctTweetsWithWatchWords": 100 * (numTweetsWithWatchWords / tweets count) + "%"),
numTweetsWithWatchWords:		timeWindowRollover:														0,
:								timeWindowRollover:														tweets removeAll,
:								timeWindowRollover:														tweeters removeAll,
:								timeWindowRollover:														tweetersList removeAll,
timeWindow:						timeWindowRollover:														newTimeWindow;

outputRules:

topTweetWords: 					numEvents = _@totalNumEvents@_: 										allTweets top(TOP_PCT, pct, "[a-zA-Z0-9-_']{3,}(?=[^a-zA-Z0-9-_']+|$)"),
topTweeters: 					numEvents = _@totalNumEvents@_: 										allTweetersList top(TOP_PCT, pct),
topTweeterPercentage:			numEvents = _@totalNumEvents@_:											100 * ((allTweetersList top(TOP_PCT, pct))["f"] sum / allTweets count) + "%",
totalNumEvents:					numEvents = _@totalNumEvents@_:											_@totalNumEvents@_,
totalNumTweeters:				numEvents = _@totalNumEvents@_:											allTweeters count,
tweetsPerTweeter:				numEvents = _@totalNumEvents@_ & allTweeters count > 0:					allTweets count / allTweeters count,
pctTweetsWithWatchWords:		numEvents = _@totalNumEvents@_ & numAllTweetsWithWatchWords > 0:		100 * (numAllTweetsWithWatchWords / allTweets count) + "%",
avgNumBusinessMentionsPerTweet:	numEvents = _@totalNumEvents@_ & numEligibleCustomerTweets > 0:			userMentions / numEligibleCustomerTweets,
avgNumTweetsInTimeInterval:		numEvents = _@totalNumEvents@_:											tweetsInTimeIntervals avg,
stdDevNumTweetsInTimeInterval:  numEvents = _@totalNumEvents@_:											tweetsInTimeIntervals stdDev,
recorded:						:																		record;