settings:

debug: true,
recording: false,
expires: 2; # In minutes!

constants:

identifier0: 1 - 2 - 3 - 4 - 5 - 6 + 7,
identifier1: "value",
identifier2: (12000 + 2 * 3 - 6) / (2 * 6 - 6),
identifier3: true,
identifier8: "blabla",
setIdentifier1: set[1000],
expIdentifier: 1 * 1 + 1 - (1 + 3)^(1 * 1 + 1)^(-2 + 4),
testWithThisString: "FLOWERS",
emptySet: set[],
emptyList: list[],
anotherEmptyList: list[1000],
urgencyScoreUrl: "http://psyling.eastus2.azurecontainer.io:3004/score?",
httpHeaders: map[]("token": "904144b818b21dac52384aaac96dc5317f58a489"),
testUrl: "http://localhost:7777/ping",
postPayload: map[1000],
unusedConstant: 0,
collectionConstant: httpHeaders,
copyByRef: identifier8,

matchTesterString: "This Is A Long Sentence With Words To Be Matched In Case-Sensitive Or Case-Insensitive Manner",
matchTesterLowerString: "this is a long sentence with words to be matched in case-sensitive or case-insensitive manner",
matchTesterSet: set[]("This", "Long", "Sentence", "With", "Words", "To", "Be", "Matched", "Case-Sensitive", "Case-Insensitive", "Manner"),
intersectionTesterSet: set[]("Long", "Short"),
matchTesterSetSuper: set[]("This", "Long", "Sentence", "With", "Words", "To", "Be", "Matched", "Case-Sensitive", "Case-Insensitive", "Manner", "Test"),
matchTesterSetSub: set[]("This", "Long", "Sentence", "With", "Words", "To", "Be", "Matched", "Case-Sensitive", "Case-Insensitive"),
matchTesterSetLower: set[]("this", "long", "sentence", "with", "words", "to", "be", "matched", "case-sensitive", "case-insensitive", "manner"),
matchTesterSetLowerSuper: set[]("this", "long", "sentence", "with", "words", "to", "be", "matched", "case-sensitive", "case-insensitive", "manner", "test"),
matchTesterSetLowerSub: set[]("this", "long", "sentence", "with", "words", "to", "be", "matched", "case-sensitive", "case-insensitive"),
matchTesterList: list[]("This", "Long", "Sentence", "With", "Words", "To", "Be", "Matched", "Case-Sensitive", "Case-Insensitive", "Manner"),
intersectionTesterList: list[]("Long", "Short"),
matchTesterListSuper: list[]("This", "Long", "Sentence", "With", "Words", "To", "Be", "Matched", "Case-Sensitive", "Case-Insensitive", "Manner", "Test"),
matchTesterListSub: list[]("This", "Long", "Sentence", "With", "Words", "To", "Be", "Matched", "Case-Sensitive", "Case-Insensitive"),
matchTesterListLower: list[]("this", "long", "sentence", "with", "words", "to", "be", "matched", "case-sensitive", "case-insensitive", "manner"),
matchTesterListLowerSuper: list[]("this", "long", "sentence", "with", "words", "to", "be", "matched", "case-sensitive", "case-insensitive", "manner", "test"),
matchTesterListLowerSub: list[]("this", "long", "sentence", "with", "words", "to", "be", "matched", "case-sensitive", "case-insensitive"),

matchTesterMap: map[]("Word1": "This", "Word4": "Long", "Word5": "Sentence", "Word6": "With", "Word7": "Words", "Word8": "To", "Word9": "Be", "Word10": "Matched", "Word12": "Case-Sensitive", "Word14": "Case-Insensitive", "Word15": "Manner"),
matchTesterKeysSet: set[]("Word1", "Word4", "Word5", "Word6", "Word7", "Word8", "Word9", "Word10", "Word12", "Word14", "Word15"),
matchTesterKeysSetLower: set[]("word1", "word4", "word5", "word6", "word7", "word8", "word9", "word10", "word12", "word14", "word15"),
matchTesterKeysSetSub: set[]("Word1", "Word4"),
matchTesterKeysSetSuper: set[]("Word1", "WorD4", "Word100"),
matchTesterKeysSetLowerSuper: set[]("word1", "word4", "word100"),
matchTesterKeysList: list[]("Word1", "Word4", "Word5", "Word6", "Word7", "Word8", "Word9", "Word10", "Word12", "Word14", "Word15"),
matchTesterKeysListLower: set[]("word1", "word4", "word5", "word6", "word7", "word8", "word9", "word10", "word12", "word14", "word15"),
matchTesterKeysListSub: list[]("Word1", "Word4"),
matchTesterKeysListLowerSuper: list[]("word1", "word4", "word100"),
matchTesterKeysListSuper: list[]("Word1", "WorD4", "Word100"),

complexDataStructure: map[]("key1": map[]("val1": 1, "val2": 2, "val3": 3, "val4": 4, "val5": list[]), 
							"key2": map[]("val1": 1, "val2": 2, "val3": 3, "val4": 4, "val5": list[]), 
							"key3": map[]("val1": 1, "val2": 2, "val3": 3, "val4": 4, "val5": list[]), 
							"key4": map[]("val1": 1, "val2": 2, "val3": 3, "val4": 4, "val5": list[]));

variables:

httpParameters: map[]("use_formula": "0", "formula_name": "formality", "model": "xgboost", "tokenize": "1", 
						"sigmoid": "1", "only_max": "0", "custom_vocabularies": "exclamation, accident, insurance, traffic, financial, covid, weather, demand, long_academic_words, security, health_generic, mental", 
						"n_categories": "3", "custom_labels": "low,medium,high", "thresholds": "0.6,0.7", "weights": "formality", "force_sync": "0", "per_component": "1", "verbose": "1"),

echoParameters: map[]("echoParameters": "Echo this sentence"),

setIdentifier2: set[]("element1", 2, true, @["urgency"]["result"]["score"], (5 * 19 - 70) / 3.5),
setIdentifier30: list[1](@["aSet"]),
setIdentifier3: list[100](@["aSet"], @["bSet"], -8),
setIdentifier4: list[100](@["bSet"]),
setIdentifier5: list[100](@["cSet"]),
aSetList: list[100](@["aSet"]),
observedData: list[100](@["observedData"]),
identifier4: "value",
identifier5: abs(6789.23 - -0.23),
identifier6: false,
identifier7: @["urgency"]["result"]["score"],
identifier9: -0.9,
identifier10: setIdentifier2 count,
identifier11: 12 > 11,
identifier12: "hello" = "hallo",
identifier13: 12 = 11,
identifier14: 12 < 11,
identifier15: "hello" ~ "hallo",
identifier16: identifier2 = 1000 & setIdentifier1 = setIdentifier2 | setIdentifier2 contains(@["urgency"]["result"]["score"]) & abs(aSetList min) = 1,
identifier17: setIdentifier5 contains(numEvents),
testSetA: setIdentifier3 contains(setIdentifier30 count - 12),
testC: @["nlu"]["intentMapperResults"] exists,
testSetB: @["bSet"][1],
doesSetBHaveElement: setIdentifier4 contains(identifier8),
testListD: list[100](@["completedGoals"]),
slotsAccessor: "slots",
jsonAccess: @[slotsAccessor]["DATE"][0]["start"]["ISODate"],
testString: @["text"] exists,
dateTest: @["data"]["request"]["messages"][0]["source"]["originalMessageTimestamp"] * 1000 < now & setIdentifier3 contains(9),
sizeOfD: 0,
listIndex: 1,
listElementTest1: setIdentifier5[listIndex],
listElementTest2: setIdentifier5[listIndex - 1],

unusedVariable: "",

strcmp: "This is a Case-Sensitive String",

# This is a comment

emptyMapConstant: map[],
nonEmptyMapConstant: map[]("firstElement": "a", "secondElement": 2, "thirdElement": false, @["data"]["request"]["messages"][0]["source"], "lastElement": "One Headline With Many Words"),
testNonEmptyMapConstant1: nonEmptyMapConstant containsKeys("firstElement") = true,
testNonEmptyMapConstant2: nonEmptyMapConstant containsKeys("firstElement", "secondElement") = true,
testNonEmptyMapConstant3: nonEmptyMapConstant containsKeys("firstElement", "fourthElement") = false,
testNonEmptyMapConstant4: nonEmptyMapConstant containsKeys("fourthElement") = false,
testSetContains1: setIdentifier2 contains("element"+"1") | setIdentifier2 contains( (5 * 9 - 5) / 21 ) = false,
testSetContains2: setIdentifier2 contains("element1", 2) = true,
testSetContains3: setIdentifier2 contains("element1", "element2") = true,
testSetContains4: setIdentifier2 contains("element2") = false,
nonEmptySet: set[],
testAnything: false,
observedDataSum: 0,
observedDataMin: 0,
observedDataMax: 0,
observedDataAvg: 0,
observedDataStdDev: 0,
observedDataCount: 0,
observedDataQualifiedCount: 0,
observedDataAvgDiff: 0,
observedDataAvgSqrDiff: 0,

setResult: set[](1000, "added"),
mapResult: map[]("added1": "value1", "added2": "value2"),
listResult: list[100],

s: "blabla",

mapElement: 0,
listElement: 0,
urgencies: list[1000],
avgUrgency: 0,
echoString: "",
complexTestMap: map[]("aList": list[100], "aSet": set[], "aMap": map[]),

testAggregation: 0,
stringLength: 0,
numMatchesInString: 0,
retVal: list[],

finiteSet: set[5],
setToSort: set[100]("this", "is", "a", "small", "and", "finite", "set", "of", "strings", "that", "need", "to", "be", "sorted"),
finiteMap: map[5],
finiteList: list[5],
infiniteSet: set[],
infiniteMap: map[],
infiniteList: list[],

mapWithNumbers: map[]("a": 100, "b": 50, "c": 75, "d": 25, "e": -10, "f": 5),

timestamp: 0,
timeWindow1: 0,
timeWindow2: 0,
integerDivision: false,
toString: false,
toNumber: false,
toBoolean: false,
firstTimestamp: @["slots"]["DATE"][0]["start"]["ISODate"] dateToNumber("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"),
date: "",

minVal: 0,
maxVal: 0,

testVal: 0,

timeWindowedSet: set{1},
timeWindowedMap: map{2},
timeWindowedList: list{3},

setForArithmetic: set[](1, 2, 3, 4, 5, 6),
mapForArithmetic: map[]("a": 1, "b": 2, "c": 3, "d": 4, "e": 5, "f": 6),
listForArithmetic: list[](1, 2, 3, 4, 5, 6),

u: 1,
w: 1,
v: 1;

updateRules:

: timestamp: @["slots"]["DATE"][0]["start"]["ISODate"] dateToNumber("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"),
: timeWindow1: @["slots"]["DATE"][0]["start"]["ISODate"] dateToTimeWindow("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", firstTimestamp, 3600000),
: timeWindow2: @["timestamp_ms"] numberToTimeWindow(firstTimestamp, 3600000),
: date: timestamp numberToDate("yyyy-MM-dd HH:mm:ss"),

: integerDivision: 13.789678 // 3.15209 = 4,
: toString: @["aSet"][3] numberToString = "13.0",
: toNumber: "13" stringToNumber = 13,
: toBoolean: "true" stringToBoolean = true,

: testAggregation: @["aSet"] avg,
: stringLength: @["text"] count,
: numMatchesInString: @["text"] count("MY"),

:: complexTestMap["aList"] add("1"),
:: complexTestMap["aSet"] add("2"),
:: complexTestMap["aMap"] add("newProperty": "3"),
: aSetList: aSetList add(@["aSet"]),
@["slots"]["DATE"][0]["start"]["minute"] < 30 : identifier5: identifier5 + 1 else identifier5 - 1,
: testListD: testListD add(2, 3, 4, 5, "six", "seven"),
: testListD: testListD remove(3, "six"),
: testListD: testListD removeLast,
: testListD: testListD add("cValue"),

!(testListD contains("cValue")): sizeOfD: testListD count * 100 else 1 - testListD count,
: nonEmptyMapConstant: nonEmptyMapConstant add("newEntry":"this is a new entry", "anotherNewEntry": 1 * (5 - 10), "yetAnotherEntry": testListD count * 2),
nonEmptyMapConstant containsKeys("newEntry"): nonEmptyMapConstant: nonEmptyMapConstant remove("newEntry", "anotherNewEntry"),
: testAnything: nonEmptySet count = 0,
nonEmptySet count = 0: nonEmptySet: nonEmptySet add(now),

: observedDataSum: observedData sum,
: observedDataMin: observedData min,
: observedDataMax: observedData max,
: observedDataStdDev: observedData stdDev,
: observedDataCount: observedData count,
: observedDataQualifiedCount: observedData count(observedData[0] + 1000),
: observedDataAvg: observedData avg(0.1),
: observedDataAvgDiff: observedData avgDiff(0.2),
: observedDataAvgSqrDiff: observedData avgSqrDiff(0.3),

: setResult: setIdentifier2 + setResult - setResult,
: mapResult: nonEmptyMapConstant + mapResult,
: listResult: listResult + setIdentifier3 - setIdentifier3,
: httpParameters: httpParameters add("text": "I URGENTLY NEED INSURANCE FOR MY NEW CAR. Right now. Not later. Help me now."),
: urgencies: urgencies add(listResult),
#urgencies:: urgencies add(get(urgencyScoreUrl, httpParameters, httpHeaders)["content"]),
# retVal:: get(urgencyScoreUrl, httpParameters, httpHeaders),
# avgUrgency:: urgencies avg,
: avgUrgency: urgencies count,
# retVal:: post(testUrl, httpParameters, postPayload, httpHeaders),
# echoString:: get(testUrl, echoParameters)["echoParameters"],
: s: "yetAnotherEntry",
: mapElement: nonEmptyMapConstant[s],
: listElement: setIdentifier3[1],

: s: s + "bla",

: : finiteSet add(numEvents) \
  : finiteMap add("event-" + numEvents: numEvents) \
  : finiteMap add("key1": 2.5, "key2": "value", "key3": false) \
  : finiteList add(numEvents) \
  : infiniteSet add(numEvents) \
  : infiniteMap add("event-" + numEvents: numEvents) \
  : infiniteList add(numEvents),
  
finiteSet contains(numEvents): u: u * 2 else -u * 2 \ # result should be: u = 2, w = 3, v = -4
							   w: w * 3 else -w * 3 \
							   v: -v * 4 else v * 4,
							   
!finiteSet contains(numEvents): u: 0 \
								w: 0 \
								v: 0,
   
: minVal: min(mapWithNumbers["a"] + 1, mapWithNumbers["b"] - 2),
: maxVal: max(mapWithNumbers["a"] + 1, mapWithNumbers["b"] - 2),

# map[]("a": 100, "b": 50, "c": 75, "d": 25, "e": -10, "f": 5),
: testVal: min(mapWithNumbers countKeys, mapWithNumbers max) - max(mapWithNumbers avg, mapWithNumbers min),

:: timeWindowedSet add(now),
:: timeWindowedMap add(now numberToString: now),
:: timeWindowedList add(now);

outputRules:
# filter variables for inclusion in returned (versus stored) JSON object

s = "yetAnotherEntrybla": metric1: nonEmptyMapConstant,
: firstListIndex: aSetList firstIndex(9),
: lastListIndex: aSetList lastIndex(9),
: listIndexTest : aSetList firstIndex(9) < aSetList lastIndex(9),
: test : "a" + 5 + "6",
# tes2:: retVal,
: logTest: log(10),
: histogram: observedData histo(-200, 20, 20),
: sortedFiniteSetAsc: setToSort sortAsc,
: sortedFiniteSetDesc: setToSort sortDesc,
: sortedListAsc: observedData sortAsc,
: sortedListDesc: observedData sortDesc,
: sortedMapAscKeys: mapWithNumbers sortAscKeys,
: sortedMapDescKeys: mapWithNumbers sortDescKeys,
: sortedMapAscValues: mapWithNumbers sortAscValues,
: sortedMapDescValues: mapWithNumbers sortDescValues,

: finiteSetCount: finiteSet count,
: finiteMapKeyCount: finiteMap countKeys?("KEY1"),
: finiteMapValuesCount1: finiteMap countValues(false) = 1,
: finiteMapValuesCount2: finiteMap countValues(true) = 0,
: finiteMapValuesCount3: finiteMap countValues("value") = 1,
: finiteMapValuesCount4: finiteMap countValues(2.5) = 1,
: finiteMapValuesCount5: finiteMap countValues("val.*") = 1,
: finiteMapValuesCount6: finiteMap countKeys("key.*") = 3,
: finiteListCount: finiteList count,
: infiniteSetCount: infiniteSet count,
: infiniteMapCount: infiniteMap countKeys,
: infiniteListCount: infiniteList count,

: containsStrings1: strcmp contains(".*string.*") = false,
: containsStrings2: strcmp contains("(?i).*string.*") = true,
: containsKeys1: nonEmptyMapConstant containsKeys("FirstElement") = false,
: containsKeys2: nonEmptyMapConstant containsKeys("(?i)FirstElement") = true,
: containsKeys3: nonEmptyMapConstant containsKeys("(?i)firstElement") = true,
: containsValue1: nonEmptyMapConstant containsValues("one headline with many words") = false,
: containsValue2: nonEmptyMapConstant containsValues("(?i)one headline with many words") = true,
: containsValue3: nonEmptyMapConstant containsValues("One Headline With Many Words") = true,
: containsSet1: setIdentifier2 contains("Element1") = false,
: containsSet2: setIdentifier2 contains("(?i)Element1") = true,
: containsSet3: setIdentifier2 contains("element1") = true,
: containsList1: setIdentifier4 contains("Blabla") = false ,
: containsList2: setIdentifier4 contains("(?i)Blabla") = true,
: containsList3: setIdentifier4 contains("blabla") = true,
: containsList4: setIdentifier4 contains("bla", "Abl") = false,
: containsList5: setIdentifier4 contains("(?i)bla", "(?i)Blabla") = false,

: containsNumber: setIdentifier4 contains(1) = true,
: doesNotContainNumber: setIdentifier4 contains(2) = false,

: containsBoolean: setIdentifier4 contains(false) = true,
: doesNotContainBoolean: setIdentifier4 contains(true) = false,

: _1matchString11: matchTesterString contains(matchTesterSet) = true,
: _1matchString12: matchTesterString contains?(matchTesterSet) = true,
: _1matchString13: matchTesterString containsSome(matchTesterSet) = true,
: _1matchString14: matchTesterString containsSome?(matchTesterSet) = true,

: _1matchString21: matchTesterString contains(matchTesterSetSub) = true,
: _1matchString22: matchTesterString contains?(matchTesterSetSub) = true,
: _1matchString23: matchTesterString containsSome(matchTesterSetSub) = true,
: _1matchString24: matchTesterString containsSome?(matchTesterSetSub) = true,

: _1matchString31: matchTesterString contains(matchTesterSetSuper) = false,
: _1matchString32: matchTesterString contains?(matchTesterSetSuper) = false,
: _1matchString33: matchTesterString containsSome(matchTesterSetSuper) = true,
: _1matchString34: matchTesterString containsSome?(matchTesterSetSuper) = true,

: _1matchString41: matchTesterString contains(matchTesterSetLower) = false,
: _1matchString42: matchTesterString contains?(matchTesterSetLower) = true,
: _1matchString43: matchTesterString containsSome(matchTesterSetLower) = false,
: _1matchString44: matchTesterString containsSome?(matchTesterSetLower) = true,

: _1matchString51: matchTesterString contains(matchTesterSetLowerSub) = false,
: _1matchString52: matchTesterString contains?(matchTesterSetLowerSub) = true,
: _1matchString53: matchTesterString containsSome(matchTesterSetLowerSub) = false,
: _1matchString54: matchTesterString containsSome?(matchTesterSetLowerSub) = true,

: _1matchString61: matchTesterString contains(matchTesterSetLowerSuper) = false,
: _1matchString62: matchTesterString contains?(matchTesterSetLowerSuper) = false,
: _1matchString63: matchTesterString containsSome(matchTesterSetLowerSuper) = false,
: _1matchString64: matchTesterString containsSome?(matchTesterSetLowerSuper) = true,

: _1matchString71: matchTesterLowerString contains(matchTesterSet) = false,
: _1matchString72: matchTesterLowerString contains?(matchTesterSet) = true,
: _1matchString73: matchTesterLowerString containsSome(matchTesterSet) = false,
: _1matchString74: matchTesterLowerString containsSome?(matchTesterSet) = true,

: _1matchString81: matchTesterLowerString contains(matchTesterSetSub) = false,
: _1matchString82: matchTesterLowerString contains?(matchTesterSetSub) = true,
: _1matchString83: matchTesterLowerString containsSome(matchTesterSetSub) = false,
: _1matchString84: matchTesterLowerString containsSome?(matchTesterSetSub) = true,

: _1matchString91: matchTesterLowerString contains(matchTesterSetSuper) = false,
: _1matchString92: matchTesterLowerString contains?(matchTesterSetSuper) = false,
: _1matchString93: matchTesterLowerString containsSome(matchTesterSetSuper) = false,
: _1matchString94: matchTesterLowerString containsSome?(matchTesterSetSuper) = true,

: _1matchString101: matchTesterLowerString contains(matchTesterSetLower) = true,
: _1matchString102: matchTesterLowerString contains?(matchTesterSetLower) = true,
: _1matchString103: matchTesterLowerString containsSome(matchTesterSetLower) = true,
: _1matchString104: matchTesterLowerString containsSome?(matchTesterSetLower) = true,

: _1matchString111: matchTesterLowerString contains(matchTesterSetLowerSub) = true,
: _1matchString112: matchTesterLowerString contains?(matchTesterSetLowerSub) = true,
: _1matchString113: matchTesterLowerString containsSome(matchTesterSetLowerSub) = true,
: _1matchString114: matchTesterLowerString containsSome?(matchTesterSetLowerSub) = true,

: _1matchString121: matchTesterLowerString contains(matchTesterSetLowerSuper) = false,
: _1matchString122: matchTesterLowerString contains?(matchTesterSetLowerSuper) = false,
: _1matchString123: matchTesterLowerString containsSome(matchTesterSetLowerSuper) = true,
: _1matchString124: matchTesterLowerString containsSome?(matchTesterSetLowerSuper) = true,

: _2matchString11: matchTesterString contains(matchTesterList) = true,
: _2matchString12: matchTesterString contains?(matchTesterList) = true,
: _2matchString13: matchTesterString containsSome(matchTesterList) = true,
: _2matchString14: matchTesterString containsSome?(matchTesterList) = true,

: _2matchString21: matchTesterString contains(matchTesterListSub) = true,
: _2matchString22: matchTesterString contains?(matchTesterListSub) = true,
: _2matchString23: matchTesterString containsSome(matchTesterListSub) = true,
: _2matchString24: matchTesterString containsSome?(matchTesterListSub) = true,

: _2matchString31: matchTesterString contains(matchTesterListSuper) = false,
: _2matchString32: matchTesterString contains?(matchTesterListSuper) = false,
: _2matchString33: matchTesterString containsSome(matchTesterListSuper) = true,
: _2matchString34: matchTesterString containsSome?(matchTesterListSuper) = true,

: _2matchString41: matchTesterString contains(matchTesterListLower) = false,
: _2matchString42: matchTesterString contains?(matchTesterListLower) = true,
: _2matchString43: matchTesterString containsSome(matchTesterListLower) = false,
: _2matchString44: matchTesterString containsSome?(matchTesterListLower) = true,

: _2matchString51: matchTesterString contains(matchTesterListLowerSub) = false,
: _2matchString52: matchTesterString contains?(matchTesterListLowerSub) = true,
: _2matchString53: matchTesterString containsSome(matchTesterListLowerSub) = false,
: _2matchString54: matchTesterString containsSome?(matchTesterListLowerSub) = true,

: _2matchString61: matchTesterString contains(matchTesterListLowerSuper) = false,
: _2matchString62: matchTesterString contains?(matchTesterListLowerSuper) = false,
: _2matchString63: matchTesterString containsSome(matchTesterListLowerSuper) = false,
: _2matchString64: matchTesterString containsSome?(matchTesterListLowerSuper) = true,

: _2matchString71: matchTesterLowerString contains(matchTesterList) = false,
: _2matchString72: matchTesterLowerString contains?(matchTesterList) = true,
: _2matchString73: matchTesterLowerString containsSome(matchTesterList) = false,
: _2matchString74: matchTesterLowerString containsSome?(matchTesterList) = true,

: _2matchString81: matchTesterLowerString contains(matchTesterListSub) = false,
: _2matchString82: matchTesterLowerString contains?(matchTesterListSub) = true,
: _2matchString83: matchTesterLowerString containsSome(matchTesterListSub) = false,
: _2matchString84: matchTesterLowerString containsSome?(matchTesterListSub) = true,

: _2matchString91: matchTesterLowerString contains(matchTesterListSuper) = false,
: _2matchString92: matchTesterLowerString contains?(matchTesterListSuper) = false,
: _2matchString93: matchTesterLowerString containsSome(matchTesterListSuper) = false,
: _2matchString94: matchTesterLowerString containsSome?(matchTesterListSuper) = true,

: _2matchString101: matchTesterLowerString contains(matchTesterListLower) = true,
: _2matchString102: matchTesterLowerString contains?(matchTesterListLower) = true,
: _2matchString103: matchTesterLowerString containsSome(matchTesterListLower) = true,
: _2matchString104: matchTesterLowerString containsSome?(matchTesterListLower) = true,

: _2matchString111: matchTesterLowerString contains(matchTesterListLowerSub) = true,
: _2matchString112: matchTesterLowerString contains?(matchTesterListLowerSub) = true,
: _2matchString113: matchTesterLowerString containsSome(matchTesterListLowerSub) = true,
: _2matchString114: matchTesterLowerString containsSome?(matchTesterListLowerSub) = true,

: _2matchString121: matchTesterLowerString contains(matchTesterListLowerSuper) = false,
: _2matchString122: matchTesterLowerString contains?(matchTesterListLowerSuper) = false,
: _2matchString123: matchTesterLowerString containsSome(matchTesterListLowerSuper) = true,
: _2matchString124: matchTesterLowerString containsSome?(matchTesterListLowerSuper) = true,

: _3matchSet1: matchTesterSet contains(matchTesterList) = true,
: _3matchSet2: matchTesterSet contains(matchTesterListSub) = true,
: _3matchSet3: matchTesterSet contains(matchTesterListSuper) = false,
: _3matchSet4: matchTesterSet contains?(matchTesterList) = true,
: _3matchSet5: matchTesterSet contains?(matchTesterListSub) = true,
: _3matchSet6: matchTesterSet contains?(matchTesterListSuper) = false,
: _3matchSet7: matchTesterSet containsSome(matchTesterList) = true,
: _3matchSet8: matchTesterSet containsSome(matchTesterListSub) = true,
: _3matchSet9: matchTesterSet containsSome(matchTesterListSuper) = true,
: _3matchSet10: matchTesterSet containsSome?(matchTesterList) = true,
: _3matchSet11: matchTesterSet containsSome?(matchTesterListSub) = true,
: _3matchSet12: matchTesterSet containsSome?(matchTesterListSuper) = true,
: _3matchSet13: matchTesterSet contains(matchTesterListLower) = false,
: _3matchSet14: matchTesterSet contains?(matchTesterListLower) = true,
: _3matchSet15: matchTesterSet contains(matchTesterListLowerSuper) = false,
: _3matchSet16: matchTesterSet contains?(matchTesterListLowerSuper) = false,
: _3matchSet17: matchTesterSet contains?(matchTesterListLowerSuper) = false,
: _3matchSet18: matchTesterSet containsSome?(matchTesterListLowerSuper) = true,

: _4matchList1: matchTesterList contains(matchTesterSet) = true,
: _4matchList2: matchTesterList contains(matchTesterSetSub) = true,
: _4matchList3: matchTesterList contains(matchTesterSetSuper) = false,
: _4matchList4: matchTesterList contains?(matchTesterSet) = true,
: _4matchList5: matchTesterList contains?(matchTesterSetSub) = true,
: _4matchList6: matchTesterList contains?(matchTesterSetSuper) = false,
: _4matchList7: matchTesterList containsSome(matchTesterSet) = true,
: _4matchList8: matchTesterList containsSome(matchTesterSetSub) = true,
: _4matchList9: matchTesterList containsSome(matchTesterSetSuper) = true,
: _4matchList10: matchTesterList containsSome?(matchTesterSet) = true,
: _4matchList11: matchTesterList containsSome?(matchTesterSetSub) = true,
: _4matchList12: matchTesterList containsSome?(matchTesterSetSuper) = true,
: _4matchList13: matchTesterList contains(matchTesterSetLower) = false,
: _4matchList14: matchTesterList contains?(matchTesterSetLower) = true,
: _4matchList15: matchTesterList contains(matchTesterSetLowerSuper) = false,
: _4matchList16: matchTesterList contains?(matchTesterSetLowerSuper) = false,
: _4matchList17: matchTesterList contains?(matchTesterSetLowerSuper) = false,
: _4matchList18: matchTesterList containsSome?(matchTesterSetLowerSuper) = true,

: _5matchMap1: matchTesterMap containsValues(matchTesterList) = true,
: _5matchMap2: matchTesterMap containsValues(matchTesterListSub) = true,
: _5matchMap3: matchTesterMap containsValues(matchTesterListSuper) = false,
: _5matchMap4: matchTesterMap containsValues?(matchTesterList) = true,
: _5matchMap5: matchTesterMap containsValues?(matchTesterListSub) = true,
: _5matchMap6: matchTesterMap containsValues?(matchTesterListSuper) = false,
: _5matchMap7: matchTesterMap containsSomeValues(matchTesterList) = true,
: _5matchMap8: matchTesterMap containsSomeValues(matchTesterListSub) = true,
: _5matchMap9: matchTesterMap containsSomeValues(matchTesterListSuper) = true,
: _5matchMap10: matchTesterMap containsSomeValues?(matchTesterList) = true,
: _5matchMap11: matchTesterMap containsSomeValues?(matchTesterListSub) = true,
: _5matchMap12: matchTesterMap containsSomeValues?(matchTesterListSuper) = true,
: _5matchMap13: matchTesterMap containsValues(matchTesterListLower) = false,
: _5matchMap14: matchTesterMap containsValues?(matchTesterListLower) = true,
: _5matchMap15: matchTesterMap containsValues(matchTesterListLowerSuper) = false,
: _5matchMap16: matchTesterMap containsValues?(matchTesterListLowerSuper) = false,
: _5matchMap17: matchTesterMap containsValues?(matchTesterListLowerSuper) = false,
: _5matchMap18: matchTesterMap containsSomeValues?(matchTesterListLowerSuper) = true,

: _6matchMap1: matchTesterMap containsValues(matchTesterSet) = true,
: _6matchMap2: matchTesterMap containsValues(matchTesterSetSub) = true,
: _6matchMap3: matchTesterMap containsValues(matchTesterSetSuper) = false,
: _6matchMap4: matchTesterMap containsValues?(matchTesterSet) = true,
: _6matchMap5: matchTesterMap containsValues?(matchTesterSetSub) = true,
: _6matchMap6: matchTesterMap containsValues?(matchTesterSetSuper) = false,
: _6matchMap7: matchTesterMap containsSomeValues(matchTesterSet) = true,
: _6matchMap8: matchTesterMap containsSomeValues(matchTesterSetSub) = true,
: _6matchMap9: matchTesterMap containsSomeValues(matchTesterSetSuper) = true,
: _6matchMap10: matchTesterMap containsSomeValues?(matchTesterSet) = true,
: _6matchMap11: matchTesterMap containsSomeValues?(matchTesterSetSub) = true,
: _6matchMap12: matchTesterMap containsSomeValues?(matchTesterSetSuper) = true,
: _6matchMap13: matchTesterMap containsValues(matchTesterSetLower) = false,
: _6matchMap14: matchTesterMap containsValues?(matchTesterSetLower) = true,
: _6matchMap15: matchTesterMap containsValues(matchTesterSetLowerSuper) = false,
: _6matchMap16: matchTesterMap containsValues?(matchTesterSetLowerSuper) = false,
: _6matchMap17: matchTesterMap containsValues?(matchTesterSetLowerSuper) = false,
: _6matchMap18: matchTesterMap containsSomeValues?(matchTesterSetLowerSuper) = true,

: _7matchMap1: matchTesterMap containsKeys(matchTesterKeysSet) = true,
: _7matchMap2: matchTesterMap containsKeys(matchTesterKeysSetSub) = true,
: _7matchMap3: matchTesterMap containsKeys(matchTesterKeysSetSuper) = false,
: _7matchMap4: matchTesterMap containsKeys?(matchTesterKeysSet) = true,
: _7matchMap5: matchTesterMap containsKeys?(matchTesterKeysSetSub) = true,
: _7matchMap6: matchTesterMap containsKeys?(matchTesterKeysSetSuper) = false,
: _7matchMap7: matchTesterMap containsSomeKeys(matchTesterKeysSet) = true,
: _7matchMap8: matchTesterMap containsSomeKeys(matchTesterKeysSetSub) = true,
: _7matchMap9: matchTesterMap containsSomeKeys(matchTesterKeysSetSuper) = true,
: _7matchMap10: matchTesterMap containsSomeKeys?(matchTesterKeysSet) = true,
: _7matchMap11: matchTesterMap containsSomeKeys?(matchTesterKeysSetSub) = true,
: _7matchMap12: matchTesterMap containsSomeKeys?(matchTesterKeysSetSuper) = true,
: _7matchMap13: matchTesterMap containsKeys(matchTesterKeysSetLower) = false,
: _7matchMap14: matchTesterMap containsKeys?(matchTesterKeysSetLower) = true,
: _7matchMap15: matchTesterMap containsKeys(matchTesterKeysSetLowerSuper) = false,
: _7matchMap16: matchTesterMap containsKeys?(matchTesterKeysSetLowerSuper) = false,
: _7matchMap17: matchTesterMap containsKeys?(matchTesterKeysSetLowerSuper) = false,
: _7matchMap18: matchTesterMap containsSomeKeys?(matchTesterKeysSetLowerSuper) = true,

: _8matchMap1: matchTesterMap containsValues(matchTesterList) = true,
: _8matchMap2: matchTesterMap containsValues(matchTesterListSub) = true,
: _8matchMap3: matchTesterMap containsValues(matchTesterListSuper) = false,
: _8matchMap4: matchTesterMap containsValues?(matchTesterList) = true,
: _8matchMap5: matchTesterMap containsValues?(matchTesterListSub) = true,
: _8matchMap6: matchTesterMap containsValues?(matchTesterListSuper) = false,
: _8matchMap7: matchTesterMap containsSomeValues(matchTesterList) = true,
: _8matchMap8: matchTesterMap containsSomeValues(matchTesterListSub) = true,
: _8matchMap9: matchTesterMap containsSomeValues(matchTesterListSuper) = true,
: _8matchMap10: matchTesterMap containsSomeValues?(matchTesterList) = true,
: _8matchMap11: matchTesterMap containsSomeValues?(matchTesterListSub) = true,
: _8matchMap12: matchTesterMap containsSomeValues?(matchTesterListSuper) = true,
: _8matchMap13: matchTesterMap containsValues(matchTesterListLower) = false,
: _8matchMap14: matchTesterMap containsValues?(matchTesterListLower) = true,
: _8matchMap15: matchTesterMap containsValues(matchTesterListLowerSuper) = false,
: _8matchMap16: matchTesterMap containsValues?(matchTesterListLowerSuper) = false,
: _8matchMap17: matchTesterMap containsValues?(matchTesterListLowerSuper) = false,
: _8matchMap18: matchTesterMap containsSomeValues?(matchTesterListLowerSuper) = true,

: _9matchMap1: matchTesterMap containsKeys(matchTesterKeysList) = true,
: _9matchMap2: matchTesterMap containsKeys(matchTesterKeysListSub) = true,
: _9matchMap3: matchTesterMap containsKeys(matchTesterKeysListSuper) = false,
: _9matchMap4: matchTesterMap containsKeys?(matchTesterKeysList) = true,
: _9matchMap5: matchTesterMap containsKeys?(matchTesterKeysListSub) = true,
: _9matchMap6: matchTesterMap containsKeys?(matchTesterKeysListSuper) = false,
: _9matchMap7: matchTesterMap containsSomeKeys(matchTesterKeysList) = true,
: _9matchMap8: matchTesterMap containsSomeKeys(matchTesterKeysListSub) = true,
: _9matchMap9: matchTesterMap containsSomeKeys(matchTesterKeysListSuper) = true,
: _9matchMap10: matchTesterMap containsSomeKeys?(matchTesterKeysList) = true,
: _9matchMap11: matchTesterMap containsSomeKeys?(matchTesterKeysListSub) = true,
: _9matchMap12: matchTesterMap containsSomeKeys?(matchTesterKeysListSuper) = true,
: _9matchMap13: matchTesterMap containsKeys(matchTesterKeysListLower) = false,
: _9matchMap14: matchTesterMap containsKeys?(matchTesterKeysListLower) = true,
: _9matchMap15: matchTesterMap containsKeys(matchTesterKeysListLowerSuper) = false,
: _9matchMap16: matchTesterMap containsKeys?(matchTesterKeysListLowerSuper) = false,
: _9matchMap17: matchTesterMap containsKeys?(matchTesterKeysListLowerSuper) = false,
: _9matchMap18: matchTesterMap containsSomeKeys?(matchTesterKeysListLowerSuper) = true,

: top10: matchTesterListSuper top(10, num, "[a-zA-Z0-9_]{4,100}"),
: top4Words: matchTesterListSuper top(10, pct, "[a-zA-Z0-9_]{4,100}"),
: stringMatcher1: matchTesterListSuper top(10, num, "With"),
: stringMatcher2: matchTesterListSuper top(10, num, "(?i)with"),
: bottom3: matchTesterListSuper bottom(3, num),
: bottom3Words: matchTesterListSuper bottom(3, num, "[a-zA-Z0-9_]{4,100}"),
: top10Characters: matchTesterString top(10, pct, "[a-zA-Z0-9_ ]"),
: bottom10Characters: matchTesterString bottom(10, num, "[a-zA-Z0-9_ ]"),
: countAllCharacters: matchTesterString count("[a-zA-Z0-9_ ]"),

: emptyList: httpParameters removeAll,

: setIntersection: matchTesterSet / intersectionTesterSet = matchTesterSetSub,
: listIntersection: matchTesterList / intersectionTesterList = matchTesterListSub,

: minTest: minVal = mapWithNumbers["b"] - 2,
: maxTest: maxVal = mapWithNumbers["a"] + 1,

: testVal: testVal,

: complexDataStructureSum: complexDataStructure[">val1"] sum,
: complexDataStructureAvg: complexDataStructure[">val2"] avg,
: complexDataStructureMin: complexDataStructure[">val3"] min,
: complexDataStructureMax: complexDataStructure[">val4"] max,

: setArithmeticPlusMinus: 1.5 + setForArithmetic - 1.5 + 2,
: mapArithmeticPlusMinus: 1.5 + mapForArithmetic - 1.5 + 2,
: listArithmeticPlusMinus: 1.5 + listForArithmetic - 1.5 + 2,

: setArithmeticMultDiv: 1.5 * setForArithmetic / 1.5,
: mapArithmeticMultDiv: 1.5 * mapForArithmetic / 1.5,
: listArithmeticMultDiv: 1.5 * listForArithmetic / 1.5,

: setArithmeticMod: setForArithmetic % 2,
: mapArithmeticMod: mapForArithmetic % 2,
: listArithmeticMod: listForArithmetic % 2,

: setArithmeticIntDiv: setForArithmetic // 2,
: mapArithmeticIntDiv: mapForArithmetic // 2,
: listArithmeticIntDiv: listForArithmetic // 2,


: setArithmeticLog: log(setForArithmetic),
: mapArithmeticLog: log(mapForArithmetic),
: listArithmeticLog: log(listForArithmetic),

# u = 2, w = 3, v = -4
: assignmentTest1: u = 2,
: assignmentTest2: w = 3,
: assignmentTest3: v = -4;

# extra stuff
