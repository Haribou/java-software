# Response Times
# Measures tweet response times for all tweets versus for those containing one of two defined words (antonyms or other).

debug: on;

constants:

COLLECTION_SIZE: 100000,
OUTPUT_EVERY: 1,
ANTONYMS: list("love", "hate");

variables:

tweeters: set[COLLECTION_SIZE],
word1Tweeters: set[COLLECTION_SIZE],
word2Tweeters: set[COLLECTION_SIZE],

interArrivalTimes: list[COLLECTION_SIZE],
word1InterArrivalTimes: list[COLLECTION_SIZE],
word2InterArrivalTimes: list[COLLECTION_SIZE],

lastTweetTime: 0,
word1LastTweetTime: 0,
word2LastTweetTime: 0,

tweetTimes: map[COLLECTION_SIZE],
word1TweetTimes: map[COLLECTION_SIZE],
word2TweetTimes: map[COLLECTION_SIZE],

responseTime: 0,
word1ResponseTime: 0,
word2ResponseTime: 0,

responseTimes: list[COLLECTION_SIZE],
word1ResponseTimes: list[COLLECTION_SIZE],
word2ResponseTimes: list[COLLECTION_SIZE],

isWord1: false,
isWord2: true;

updateRules:

isWord1:: @["text"] contains?(ANTONYMS[0]),
isWord2:: @["text"] contains?(ANTONYMS[1]),

:: tweeters add(@["user"]["screen_name"]),
: isWord1: word1Tweeters add(@["user"]["screen_name"]),
: isWord2: word2Tweeters add(@["user"]["screen_name"]),

: lastTweetTime > 0: interArrivalTimes add(now - lastTweetTime),
: isWord1 & word1LastTweetTime > 0: word1InterArrivalTimes add(now - word1LastTweetTime), 
: isWord2 & word2LastTweetTime > 0: word2InterArrivalTimes add(now - word2LastTweetTime), 

:: tweetTimes add(@["id_str"]: now),
: isWord1: word1TweetTimes add(@["id_str"]: now),
: isWord2: word2TweetTimes add(@["id_str"]: now),

responseTime: @["in_reply_to_status_id_str"] notNull & tweetTimes containsKeys(@["in_reply_to_status_id_str"]): (now - tweetTimes[@["in_reply_to_status_id_str"]]) / 1000 else 0,
word1ResponseTime: isWord1 & @["in_reply_to_status_id_str"] notNull & word1TweetTimes containsKeys(@["in_reply_to_status_id_str"]): (now - word1TweetTimes[@["in_reply_to_status_id_str"]]) / 1000 else 0,
word2ResponseTime: isWord2 & @["in_reply_to_status_id_str"] notNull & word2TweetTimes containsKeys(@["in_reply_to_status_id_str"]): (now - word2TweetTimes[@["in_reply_to_status_id_str"]]) / 1000 else 0,

: responseTime > 0: responseTimes add(responseTime),
: word1ResponseTime > 0: word1ResponseTimes add(word1ResponseTime),
: word2ResponseTime > 0: word2ResponseTimes add(word2ResponseTime),

lastTweetTime:: now,
word1LastTweetTime: isWord1: now,
word2LastTweetTime: isWord2: now;

outputRules:

allTweetersCount: numEvents % OUTPUT_EVERY = 0: tweetTimes count,
word1TweetersCount: numEvents % OUTPUT_EVERY = 0: word1TweetTimes count,
word2TweetersCount: numEvents % OUTPUT_EVERY = 0: word2TweetTimes count,

allTweetsPerTweeter: numEvents % OUTPUT_EVERY = 0: tweetTimes count / tweeters count,
word1TweetsPerTweeter: numEvents % OUTPUT_EVERY = 0 & word1Tweeters count > 0: word1TweetTimes count / word1Tweeters count,
word2TweetsPerTweeter: numEvents % OUTPUT_EVERY = 0 & word2Tweeters count > 0: word2TweetTimes count / word2Tweeters count,

allAvgResponseTime: numEvents % OUTPUT_EVERY = 0 & responseTimes count > 0: responseTimes avg + " sec",
word1AvgResponseTime: numEvents % OUTPUT_EVERY = 0 & word1ResponseTimes count > 0: word1ResponseTimes avg + " sec",
word2AvgResponseTime: numEvents % OUTPUT_EVERY = 0 & word2ResponseTimes count > 0: word2ResponseTimes avg + " sec",

allResponseRates: numEvents % OUTPUT_EVERY = 0 & tweetTimes count > 0: 100 * (responseTimes count / tweetTimes count) + "%",
word1ResponseRates: numEvents % OUTPUT_EVERY = 0 & word1TweetTimes count > 0: 100 * (word1ResponseTimes count / word1TweetTimes count) + "%",
word2ResponseRates: numEvents % OUTPUT_EVERY = 0 & word2TweetTimes count > 0: 100 * (word2ResponseTimes count / word2TweetTimes count) + "%",

allInterArrivalTimesAvg: numEvents % OUTPUT_EVERY = 0 & interArrivalTimes count > 0: interArrivalTimes avg + " ms",
word1InterArrivalTimesAvg: numEvents % OUTPUT_EVERY = 0 & word1InterArrivalTimes count > 0: word1InterArrivalTimes avg + " ms",
word2InterArrivalTimesAvg: numEvents % OUTPUT_EVERY = 0 & word2InterArrivalTimes count > 0: word2InterArrivalTimes avg + " ms",

allInterArrivalTimesHistogram: tweetTimes count % OUTPUT_EVERY = 0 & interArrivalTimes count > 0: interArrivalTimes histo(0, 100, 300),
word1InterArrivalTimesHistogram: word1TweetTimes count % OUTPUT_EVERY = 0 & word1InterArrivalTimes count > 0: word1InterArrivalTimes histo(0, 100, 300),
word2InterArrivalTimesHistogram: word2TweetTimes count % OUTPUT_EVERY = 0 & word2InterArrivalTimes count > 0: word2InterArrivalTimes histo(0, 100, 300);