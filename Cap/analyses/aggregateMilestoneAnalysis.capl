# Tracks the timing of flow entry in a Virtual Agent Studio agent for all sessions.

settings:

debug: false,
recording: false,
expires: 30 * 24 * 60;

constants:

WINDOW_LENGTH_MINUTES: 60,
WEBHOOK_URL: "https://webhook.site/30dcb84f-1376-4884-8570-f275324dbe00";

variables:

elapsedMilestoneTimesSecMax: map{ WINDOW_LENGTH_MINUTES },
elapsedMilestoneTimesSecTotals: map{ WINDOW_LENGTH_MINUTES },
elapsedMilestoneTimesSecAvg: map{ WINDOW_LENGTH_MINUTES },
milestones: list{ WINDOW_LENGTH_MINUTES },
milestonesHit: map{ WINDOW_LENGTH_MINUTES },
conversations: set{ WINDOW_LENGTH_MINUTES },
postPayload: map[]("label": "aggregateMilestoneAnalysis", "vaId": @["individualAnalysis"]["vaId"]),
milestone: "",
elapsedTimeSec: 0,
numMilestoneHits: 0;

updateRules:

:
	:
		conversations add(@["individualAnalysis"]["sessionId"]) \
	milestone:
		@["individualAnalysis"]["milestone"] \
	:
		milestones add(milestone) \
	elapsedTimeSec:
		@["individualAnalysis"]["elapsedTimeSec"],
	
milestonesHit[milestone] exists:	
	numMilestoneHits:
		milestonesHit[milestone] + 1
		else
		1,
	
:
	:
		milestonesHit add(milestone: numMilestoneHits),

elapsedMilestoneTimesSecAvg[milestone] exists:
	:
		elapsedMilestoneTimesSecMax add(milestone: max(elapsedMilestoneTimesSecMax[milestone], elapsedTimeSec)) else elapsedMilestoneTimesSecMax add(milestone: elapsedTimeSec) \
		elapsedMilestoneTimesSecTotals add(milestone: elapsedMilestoneTimesSecTotals[milestone] + elapsedTimeSec) else elapsedMilestoneTimesSecTotals add(milestone: elapsedTimeSec) \
		elapsedMilestoneTimesSecAvg add(milestone: (elapsedMilestoneTimesSecTotals[milestone] + elapsedTimeSec) / numMilestoneHits) else elapsedMilestoneTimesSecAvg add(milestone: elapsedTimeSec),
		
:
	:
		postPayload add("timestamp": now,
						"numberConversations": conversations count,
						"totalNumMilestonesHit": milestones count,
						"milestonesHitPerConversation": milestones count / conversations count,
						"milestonesHitInPctConversations": milestonesHit / conversations count * 100,
						"milestoneCount": milestonesHit,
						"elapsedMilestoneTimesSecTotalsRanked": elapsedMilestoneTimesSecTotals sortDescValues,
						"elapsedMilestoneTimesSecAvgRanked": elapsedMilestoneTimesSecAvg sortDescValues,
						"elapsedMilestoneTimesSecMaxRanked": elapsedMilestoneTimesSecMax sortDescValues);

outputRules:

:
	:								
		post(WEBHOOK_URL, "", postPayload);