# Sentiment evolution for tweets. We measure the average sentiment of all tweets per time window and track the averages over all time windows.

settings:

debug: 								false,
recording: 							false;
			
constants:			
			
MIN_TWEET_LENGTH:					25,
			
BUSINESSES:							set("united", "AmericanAir", "JetBlue", "Delta", "Southwest"),
			
POS_WORDS: 							set("happy", "love", "luv", "thank", "wow", "good", "nice", "awesome", "cool", "friendly", "best", "appreciate", "wonderful", "great", "grateful", "perfect"),
NEG_WORDS: 							set("delayed", "lost", "cancel", "rude", "awful", "terrible", "wrong", "vaccin", "vax", "covid", "ridiculous", "hate", "suck", "wors", "missed", "joke", "shit", "crap", "piss", "bitch", "ass", "fuck", "trash", "idiot", "poor", "hell", "complain", "unacceptable", "wtf", "stupid", "excuse", "nobody", "respect", "problem", "racis", "disappoint", "mess", "refuse", "error", "unbelievable", "kick", "nasty", "frustrating", "lie"),
			
PSYLING_URL:						"http://psyling.eastus2.azurecontainer.io:3004/sentiment",
HTTP_HEADERS: 						map("token": "904144b818b21dac52384aaac96dc5317f58a489"),
			
MAX_NUM_EVENTS:						100000,

HISTO_WIDTH:						0.05,
			
OUTPUT_AT:							_@totalNumEvents@_;

variables:

httpParameters: 					map("lexicon": "afinn", "valence": "1"),
eligible:							false,
fromCustomer:						false,
fromBusiness:						false,
isBusinessResponse:					false,
isBusinessResponsePos:				false,
isBusinessResponseNeg:				false,
hasExtendedText:					false,
tweet:								"",
originalTweetId:					"",
isPos:								false,
numPosTweets:						0,
isNeg:								false,
numNegTweets:						0,
sentiment:							0,
sentimentDiff:						0,
tweets:								map[MAX_NUM_EVENTS],
numTweets:							0,
posTweets:							map[MAX_NUM_EVENTS],
negTweets:							map[MAX_NUM_EVENTS],
numAnsweredTweets:					0,
numAnsweredTweetsWithPosDiff: 		0,
numAnsweredTweetsWithNegDiff: 		0,
numAnsweredPosTweets:				0,
numAnsweredPosTweetsWithPosDiff: 	0,
numAnsweredPosTweetsWithNegDiff: 	0,
posSentimentDiff:					list[MAX_NUM_EVENTS],
numAnsweredNegTweets:				0,
numAnsweredNegTweetsWithPosDiff: 	0,
numAnsweredNegTweetsWithNegDiff: 	0,
negSentimentDiff:					list[MAX_NUM_EVENTS];

updateRules:

eligible:							: 													!@["retweeted_status"] exists,
hasExtendedText: 					: 													eligible & @["extended_tweet"] exists,
tweet: 								hasExtendedText: 									@["extended_tweet"]["full_text"],
tweet: 								eligible & !hasExtendedText: 						@["text"],
fromBusiness:						:													eligible & BUSINESSES contains(@["user"]["screen_name"]),
fromCustomer:						:													eligible & !fromBusiness & tweet count > MIN_TWEET_LENGTH,
: 									fromCustomer:										httpParameters add("text": tweet),
sentiment:							fromCustomer: 										get(PSYLING_URL, httpParameters, HTTP_HEADERS)[0]["sentiment_score"],
:									fromCustomer:										tweets add(@["id_str"]: sentiment),
numTweets:							fromCustomer:										numTweets + 1,
isPos:								:													fromCustomer & tweet containsSome?(POS_WORDS),
numPosTweets:						isPos:												numPosTweets + 1,
isNeg:								:													fromCustomer & tweet containsSome?(NEG_WORDS),		
numNegTweets:						isNeg:												numNegTweets + 1,
:									isPos:												posTweets add(@["id_str"]: sentiment),
:									isNeg:												negTweets add(@["id_str"]: sentiment),
isBusinessResponse:					:													fromBusiness & @["in_reply_to_status_id_str"] notNull,
originalTweetId:					isBusinessResponse:									@["in_reply_to_status_id_str"],
isBusinessResponse:					:													isBusinessResponse & tweets containsKeys(originalTweetId),
numAnsweredTweets:					isBusinessResponse: 								numAnsweredTweets + 1,
sentimentDiff:						isBusinessResponse:									sentiment - tweets[originalTweetId],
numAnsweredTweetsWithPosDiff:		isBusinessResponse & sentimentDiff > 0: 			numAnsweredTweetsWithPosDiff + 1,
numAnsweredTweetsWithNegDiff:		isBusinessResponse & sentimentDiff < 0: 			numAnsweredTweetsWithNegDiff + 1,
:									isBusinessResponse: 								tweets remove(originalTweetId),									
isBusinessResponsePos:				:													isBusinessResponse & posTweets containsKeys(originalTweetId),
numAnsweredPosTweets:				isBusinessResponsePos:								numAnsweredPosTweets + 1,
sentimentDiff:						isBusinessResponsePos:								sentiment - posTweets[originalTweetId],
:									isBusinessResponsePos:								posSentimentDiff add(sentimentDiff),
numAnsweredPosTweetsWithPosDiff:	isBusinessResponsePos & sentimentDiff > 0:			numAnsweredPosTweetsWithPosDiff + 1,
numAnsweredPosTweetsWithNegDiff:	isBusinessResponsePos & sentimentDiff < 0:			numAnsweredPosTweetsWithNegDiff + 1,
:									isBusinessResponsePos:								posTweets remove(originalTweetId),
isBusinessResponseNeg:				:													isBusinessResponse & negTweets containsKeys(originalTweetId),
numAnsweredNegTweets:				isBusinessResponseNeg:								numAnsweredNegTweets + 1,
sentimentDiff:						isBusinessResponseNeg:								sentiment - negTweets[originalTweetId],
:									isBusinessResponseNeg:								negSentimentDiff add(sentimentDiff),
numAnsweredNegTweetsWithPosDiff:	isBusinessResponseNeg & sentimentDiff > 0:			numAnsweredNegTweetsWithPosDiff + 1,
numAnsweredNegTweetsWithNegDiff:	isBusinessResponseNeg & sentimentDiff < 0:			numAnsweredNegTweetsWithNegDiff + 1,
:									isBusinessResponseNeg:								negTweets remove(originalTweetId);

outputRules:

totalNumTweets:						numEvents = OUTPUT_AT:								numTweets,
pctAnsweredTweets:					numEvents = OUTPUT_AT & numTweets > 0:				100 * (numAnsweredTweets / numTweets) + "%",
pctAnsweredTweetsPosDiff:			numEvents = OUTPUT_AT & numAnsweredTweets > 0:		100 * (numAnsweredTweetsWithPosDiff / numAnsweredTweets) + "%",
pctAnsweredTweetsNegDiff:			numEvents = OUTPUT_AT & numAnsweredTweets > 0:		100 * (numAnsweredTweetsWithNegDiff / numAnsweredTweets) + "%",
totalNumPosTweets:		  			numEvents = OUTPUT_AT:								numPosTweets,
pctPosAnsweredTweets:	  			numEvents = OUTPUT_AT & numPosTweets > 0:			100 * (numAnsweredPosTweets / numPosTweets) + "%",
avgPosSentimentDiff:	  			numEvents = OUTPUT_AT:								posSentimentDiff avg,
posSentimentDiff:	  				numEvents = OUTPUT_AT:								posSentimentDiff histo(-1, 2 / HISTO_WIDTH, HISTO_WIDTH),
pctPosAnsweredTweetsPosDiff:		numEvents = OUTPUT_AT & numAnsweredPosTweets > 0:	100 * (numAnsweredPosTweetsWithPosDiff / numAnsweredPosTweets) + "%",
pctPosAnsweredTweetsNegDiff:		numEvents = OUTPUT_AT & numAnsweredPosTweets > 0:	100 * (numAnsweredPosTweetsWithNegDiff / numAnsweredPosTweets) + "%",
totalNumNegTweets:		  			numEvents = OUTPUT_AT:								numNegTweets,
pctNegAnsweredTweets:	  			numEvents = OUTPUT_AT & numNegTweets > 0:			100 * (numAnsweredNegTweets / numNegTweets) + "%",
avgNegSentimentDiff:	  			numEvents = OUTPUT_AT:								negSentimentDiff avg,
negSentimentDiff:	  				numEvents = OUTPUT_AT:								negSentimentDiff histo(-1, 2 / HISTO_WIDTH, HISTO_WIDTH),
pctNegAnsweredTweetsPosDiff:		numEvents = OUTPUT_AT & numAnsweredNegTweets > 0:	100 * (numAnsweredNegTweetsWithPosDiff / numAnsweredNegTweets) + "%",
pctNegAnsweredTweetsNegDiff:		numEvents = OUTPUT_AT & numAnsweredNegTweets > 0:	100 * (numAnsweredNegTweetsWithNegDiff / numAnsweredNegTweets) + "%";