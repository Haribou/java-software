/* Generated By:JavaCC: Do not edit this line. CaplInterpreterTokenManager.java */
package com.avaya.cap;
import com.avaya.messaging.commons.io.StackTraceLogger;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import java.util.Collection;
import java.util.Map;
import java.util.Set;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map.Entry;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.ArrayList;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.Iterator;
import java.util.Date;
import java.text.SimpleDateFormat;
import com.google.gson.JsonElement;
import com.fasterxml.jackson.databind.JsonNode;
import static com.avaya.messaging.commons.utilities.StringUtils.isEmpty;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.avaya.cap.comparators.*;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import com.avaya.cap.collections.*;

/** Token Manager. */
public class CaplInterpreterTokenManager implements CaplInterpreterConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8000000010000000L) != 0L)
         {
            jjmatchedKind = 87;
            return 16;
         }
         if ((active0 & 0x7fffefffeeffff80L) != 0L || (active1 & 0x638080L) != 0L)
         {
            jjmatchedKind = 87;
            return 19;
         }
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 87;
            return 12;
         }
         return -1;
      case 1:
         if ((active0 & 0xfffffffffeffff80L) != 0L || (active1 & 0x638080L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 1;
            return 19;
         }
         return -1;
      case 2:
         if ((active0 & 0xc6cfe90bbefe7f00L) != 0L || (active1 & 0x38000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 87;
               jjmatchedPos = 2;
            }
            return 19;
         }
         if ((active0 & 0x393016f440018080L) != 0L || (active1 & 0x600080L) != 0L)
            return 19;
         return -1;
      case 3:
         if ((active0 & 0x9fdfef03befc7f80L) != 0L || (active1 & 0x30000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 3;
            return 19;
         }
         if ((active0 & 0x4000000800020000L) != 0L || (active1 & 0x8000L) != 0L)
            return 19;
         return -1;
      case 4:
         if ((active0 & 0x1fdfe703b0fc7e80L) != 0L || (active1 & 0x30000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 87;
               jjmatchedPos = 4;
            }
            return 19;
         }
         if ((active0 & 0x800008000e000100L) != 0L)
            return 19;
         return -1;
      case 5:
         if ((active0 & 0x1fdfc6003cfc7e80L) != 0L || (active1 & 0x20000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 87;
               jjmatchedPos = 5;
            }
            return 19;
         }
         if ((active0 & 0x210380000000L) != 0L || (active1 & 0x10000L) != 0L)
            return 19;
         return -1;
      case 6:
         if ((active0 & 0x1fde04033cfc7a80L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 87;
               jjmatchedPos = 6;
            }
            return 19;
         }
         if ((active0 & 0x1c20000000400L) != 0L || (active1 & 0x20000L) != 0L)
            return 19;
         return -1;
      case 7:
         if ((active0 & 0x1fd184033c007a00L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 87;
               jjmatchedPos = 7;
            }
            return 19;
         }
         if ((active0 & 0xe000000fc0080L) != 0L)
            return 19;
         return -1;
      case 8:
         if ((active0 & 0x1fcd840118f46000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 8;
            return 19;
         }
         if ((active0 & 0x10000224001a00L) != 0L)
            return 19;
         return -1;
      case 9:
         if ((active0 & 0x1fcd800008f46000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 9;
            return 19;
         }
         if ((active0 & 0x40110000000L) != 0L)
            return 19;
         return -1;
      case 10:
         if ((active0 & 0x1fcd000000f40000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 10;
            return 19;
         }
         if ((active0 & 0x800008006000L) != 0L)
            return 19;
         return -1;
      case 11:
         if ((active0 & 0xf89000000800000L) != 0L)
         {
            if (jjmatchedPos != 11)
            {
               jjmatchedKind = 87;
               jjmatchedPos = 11;
            }
            return 19;
         }
         if ((active0 & 0x1044000000740000L) != 0L)
            return 19;
         return -1;
      case 12:
         if ((active0 & 0xf88000000d00000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 12;
            return 19;
         }
         if ((active0 & 0x1000000000000L) != 0L)
            return 19;
         return -1;
      case 13:
         if ((active0 & 0x580000000500000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 13;
            return 19;
         }
         if ((active0 & 0xa08000000800000L) != 0L)
            return 19;
         return -1;
      case 14:
         if ((active0 & 0x180000000500000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 14;
            return 19;
         }
         if ((active0 & 0x400000000000000L) != 0L)
            return 19;
         return -1;
      case 15:
         if ((active0 & 0x100000000400000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 15;
            return 19;
         }
         if ((active0 & 0x80000000100000L) != 0L)
            return 19;
         return -1;
      case 16:
         if ((active0 & 0x100000000400000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 16;
            return 19;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 32:
         jjmatchedKind = 5;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800L);
      case 33:
         return jjStopAtPos(0, 78);
      case 37:
         return jjStopAtPos(0, 69);
      case 38:
         return jjStopAtPos(0, 76);
      case 40:
         return jjStopAtPos(0, 89);
      case 41:
         return jjStopAtPos(0, 90);
      case 42:
         return jjStopAtPos(0, 66);
      case 43:
         return jjStopAtPos(0, 64);
      case 44:
         return jjStopAtPos(0, 95);
      case 45:
         return jjStopAtPos(0, 65);
      case 47:
         jjmatchedKind = 67;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10L);
      case 58:
         return jjStopAtPos(0, 96);
      case 59:
         return jjStopAtPos(0, 97);
      case 60:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100L);
      case 61:
         return jjStopAtPos(0, 73);
      case 63:
         return jjStopAtPos(0, 24);
      case 64:
         return jjStopAtPos(0, 88);
      case 91:
         return jjStopAtPos(0, 91);
      case 92:
         return jjStopAtPos(0, 98);
      case 93:
         return jjStopAtPos(0, 92);
      case 94:
         return jjStopAtPos(0, 70);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x2000062040000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x400000000efc0800L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0xc0000000000100L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x400L, 0x18000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x8000000010000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x20020000L, 0x80L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0xc000010000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x1930000000000000L, 0x220000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x400000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x380000200L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x60fc11000008080L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x2000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 93);
      case 124:
         return jjStopAtPos(0, 77);
      case 125:
         return jjStopAtPos(0, 94);
      case 126:
         return jjStopAtPos(0, 74);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 32:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         break;
      case 47:
         if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(1, 68);
         break;
      case 62:
         if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(1, 75);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0xc0004020011000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000780008380L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x88010020000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0x8000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x2ff0080efc0800L, active1, 0x20080L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x600010000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1910001000004000L, active1, 0x200000L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x62000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L, active1, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L, active1, 0L);
      case 100:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 30, 19);
         return jjMoveStringLiteralDfa3_0(active0, 0x10000002000L, active1, 0L);
      case 103:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 71, 19);
         return jjMoveStringLiteralDfa3_0(active0, 0x60000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000000L, active1, 0x10000L);
      case 109:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 36, 19);
         else if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x1910000380000000L, active1, 0L);
      case 110:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 39, 19);
         return jjMoveStringLiteralDfa3_0(active0, 0xfc0800L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0L);
      case 112:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 16, 19);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 44, 19);
         return jjMoveStringLiteralDfa3_0(active0, 0x400L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x60fc00010001000L, active1, 0L);
      case 115:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 61, 19);
         return jjMoveStringLiteralDfa3_0(active0, 0x80820020000L, active1, 0x8000L);
      case 116:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 34, 19);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 86, 19);
         return jjMoveStringLiteralDfa3_0(active0, 0xc0200000004080L, active1, 0x20000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0xe000000L, active1, 0L);
      case 119:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 53, 19);
         break;
      case 120:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 38, 19);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0x30000000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x1900000000000000L, active1, 0L);
      case 101:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 79, 19);
         return jjMoveStringLiteralDfa4_0(active0, 0xc0000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x600000000001400L, active1, 0L);
      case 108:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 62, 19);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0xe000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000380000200L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000800L, active1, 0x10000L);
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 19);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 19);
         return jjMoveStringLiteralDfa4_0(active0, 0xfe80020fc0080L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x1c00000000000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa5_0(active0, 0xe000000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0xc0000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0xfc1000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x1900010000000000L, active1, 0L);
      case 103:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 8, 19);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000080L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x600000000000000L, active1, 0L);
      case 111:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 43, 19);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 63, 19);
         return jjMoveStringLiteralDfa5_0(active0, 0x600L, active1, 0L);
      case 116:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1c002800L, active1, 0x10000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L, active1, 0x20000L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000380000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L, active1, 0L);
      case 75:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L, active1, 0L);
      case 86:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x800L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x200L, active1, 0L);
      case 101:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x1e000300002400L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x600000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0xfc0000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000L);
      case 109:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 19);
         break;
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000080L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0xc0000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x1900040000000000L, active1, 0L);
      case 115:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 80, 19);
         return jjMoveStringLiteralDfa6_0(active0, 0x1c00000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L, active1, 0L);
      case 118:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 40, 19);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa7_0(active0, 0x6000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa7_0(active0, 0x1f80000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L, active1, 0L);
      case 99:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x1800000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L, active1, 0L);
      case 102:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 41, 19);
         break;
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x80L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x200L, active1, 0L);
      case 108:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 81, 19);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000010fc0800L, active1, 0L);
      case 115:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 10, 19);
         return jjMoveStringLiteralDfa7_0(active0, 0xe000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 75:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000L);
      case 86:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000L);
      case 99:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0xc000000000000L);
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x20001000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x80040000000000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x208000000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x200L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x1f00000000000000L);
      case 115:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(7, 7, 19);
         else if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0xf40000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000800L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000006000L);
      case 121:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000000000L);
      case 68:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000000L);
      case 75:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000200000L);
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000000L);
      case 83:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000540000L);
      case 84:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000000L);
      case 86:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000800000L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x800010000000L);
      case 102:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000L);
      case 103:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(8, 9, 19);
         break;
      case 108:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(8, 33, 19);
         return jjMoveStringLiteralDfa9_0(active0, 0x6000L);
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0xc0000000000000L);
      case 115:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(8, 11, 19);
         else if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(8, 12, 19);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(8, 26, 19);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 52, 19);
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L);
      case 120:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(8, 29, 19);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x1008000000800000L);
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000000000L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x84000008206000L);
      case 102:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 42, 19);
         break;
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000000000L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000540000L);
      case 116:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(9, 32, 19);
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000000000L);
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000000000L);
      case 120:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(9, 28, 19);
         break;
      case 121:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 87:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000000000L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000000000L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000800000L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x300000000540000L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000000000000L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000000000L);
      case 115:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(10, 13, 19);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(10, 14, 19);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(10, 27, 19);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 47, 19);
         break;
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000000000L);
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000000L);
      case 121:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000200000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000000000000L);
      case 101:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 11;
         }
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 60, 19);
         return jjMoveStringLiteralDfa12_0(active0, 0x101000000500000L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x880000000000000L);
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000000000000L);
      case 114:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 54, 19);
         break;
      case 115:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(11, 21, 19);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 50, 19);
         break;
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000800000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 75:
         return jjMoveStringLiteralDfa13_0(active0, 0x100000L);
      case 86:
         return jjMoveStringLiteralDfa13_0(active0, 0x400000L);
      case 87:
         return jjMoveStringLiteralDfa13_0(active0, 0x100000000000000L);
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x608000000800000L);
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x880000000000000L);
      case 115:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 48, 19);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x400000000400000L);
      case 100:
         return jjMoveStringLiteralDfa14_0(active0, 0x80000000000000L);
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0x100000L);
      case 103:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 59, 19);
         break;
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x100000000000000L);
      case 114:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 57, 19);
         break;
      case 115:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(13, 23, 19);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 51, 19);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa15_0(active0, 0x400000L);
      case 110:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 58, 19);
         return jjMoveStringLiteralDfa15_0(active0, 0x100000000000000L);
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0x80000000000000L);
      case 121:
         return jjMoveStringLiteralDfa15_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa16_0(active0, 0x100000000000000L);
      case 115:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(15, 20, 19);
         break;
      case 117:
         return jjMoveStringLiteralDfa16_0(active0, 0x400000L);
      case 119:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 55, 19);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa17_0(active0, 0x400000L);
      case 111:
         return jjMoveStringLiteralDfa17_0(active0, 0x100000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(17, 22, 19);
         break;
      case 119:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 56, 19);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 20;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 16:
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAdd(19);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAdd(19);
                  break;
               case 0:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddTwoStates(3, 4);
                  }
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(8, 9);
                  else if (curChar == 48)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAdd(4);
                  }
                  else if (curChar == 35)
                  {
                     if (kind > 6)
                        kind = 6;
                     jjCheckNAdd(1);
                  }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddTwoStates(3, 4);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddTwoStates(3, 4);
                  break;
               case 4:
                  if (curChar == 46)
                     jjCheckNAdd(5);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAdd(5);
                  break;
               case 6:
                  if (curChar != 48)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAdd(4);
                  break;
               case 7:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 8:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 9:
                  if (curChar == 34 && kind > 83)
                     kind = 83;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 16:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAdd(19);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 12:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAdd(19);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAdd(19);
                  }
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 1:
                  if (kind > 6)
                     kind = 6;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 8:
                  jjAddStates(0, 1);
                  break;
               case 10:
                  if (curChar == 101 && kind > 84)
                     kind = 84;
                  break;
               case 11:
                  if (curChar == 117)
                     jjCheckNAdd(10);
                  break;
               case 13:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 115)
                     jjCheckNAdd(10);
                  break;
               case 15:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 17:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAdd(19);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 8:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 20 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   8, 9, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, "\163\145\164\164\151\156\147\163", 
"\144\145\142\165\147", "\162\145\143\157\162\144\151\156\147", "\145\170\160\151\162\145\163", 
"\143\157\156\163\164\141\156\164\163", "\166\141\162\151\141\142\154\145\163", 
"\165\160\144\141\164\145\122\165\154\145\163", "\157\165\164\160\165\164\122\165\154\145\163", "\163\145\164", 
"\155\141\160", "\154\151\163\164", "\143\157\156\164\141\151\156\163\123\157\155\145", 
"\143\157\156\164\141\151\156\163", "\143\157\156\164\141\151\156\163\123\157\155\145\113\145\171\163", 
"\143\157\156\164\141\151\156\163\113\145\171\163", "\143\157\156\164\141\151\156\163\123\157\155\145\126\141\154\165\145\163", 
"\143\157\156\164\141\151\156\163\126\141\154\165\145\163", "\77", "\143\157\165\156\164", "\143\157\165\156\164\113\145\171\163", 
"\143\157\165\156\164\126\141\154\165\145\163", "\146\151\162\163\164\111\156\144\145\170", 
"\154\141\163\164\111\156\144\145\170", "\141\144\144", "\162\145\155\157\166\145", 
"\162\145\155\157\166\145\114\141\163\164", "\162\145\155\157\166\145\101\154\154", "\147\145\164", "\160\157\163\164", 
"\163\165\155", "\141\166\147", "\155\141\170", "\155\151\156", "\163\164\144\104\145\166", 
"\141\166\147\104\151\146\146", "\141\166\147\123\161\162\104\151\146\146", "\150\151\163\164\157", 
"\164\157\160", "\142\157\164\164\157\155", "\163\157\162\164\101\163\143", 
"\163\157\162\164\101\163\143\113\145\171\163", "\163\157\162\164\101\163\143\126\141\154\165\145\163", 
"\163\157\162\164\104\145\163\143", "\163\157\162\164\104\145\163\143\113\145\171\163", 
"\163\157\162\164\104\145\163\143\126\141\154\165\145\163", "\156\165\155\105\166\145\156\164\163", "\156\157\167", 
"\144\141\164\145\124\157\116\165\155\142\145\162", "\144\141\164\145\124\157\124\151\155\145\127\151\156\144\157\167", 
"\156\165\155\142\145\162\124\157\124\151\155\145\127\151\156\144\157\167", "\163\164\162\151\156\147\124\157\116\165\155\142\145\162", 
"\163\164\162\151\156\147\124\157\102\157\157\154\145\141\156", "\156\165\155\142\145\162\124\157\123\164\162\151\156\147", 
"\156\165\155\142\145\162\124\157\104\141\164\145", "\141\142\163", "\143\145\151\154", "\146\154\157\157\162", "\53", "\55", 
"\52", "\57", "\57\57", "\45", "\136", "\154\157\147", "\74\40", "\75", "\176", 
"\40\76", "\46", "\174", "\41", "\145\154\163\145", "\145\170\151\163\164\163", 
"\156\157\164\116\165\154\154", null, null, null, "\156\165\155", "\160\143\164", null, "\100", "\50", "\51", 
"\133", "\135", "\173", "\175", "\54", "\72", "\73", "\134", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffff81L, 0x7ffffffffL, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[20];
private final int[] jjstateSet = new int[40];
protected char curChar;
/** Constructor. */
public CaplInterpreterTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public CaplInterpreterTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 20; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 13 && (0x3600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
