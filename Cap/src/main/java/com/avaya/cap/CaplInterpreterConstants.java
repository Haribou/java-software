/* Generated By:JavaCC: Do not edit this line. CaplInterpreterConstants.java */
package com.avaya.cap;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CaplInterpreterConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SETTINGS = 7;
  /** RegularExpression Id. */
  int DEBUG = 8;
  /** RegularExpression Id. */
  int EVENT_RECORDING = 9;
  /** RegularExpression Id. */
  int EXPIRES = 10;
  /** RegularExpression Id. */
  int CONSTANTS = 11;
  /** RegularExpression Id. */
  int VARIABLES = 12;
  /** RegularExpression Id. */
  int UPDATES = 13;
  /** RegularExpression Id. */
  int OUTPUTS = 14;
  /** RegularExpression Id. */
  int SET = 15;
  /** RegularExpression Id. */
  int MAP = 16;
  /** RegularExpression Id. */
  int LIST = 17;
  /** RegularExpression Id. */
  int CONTAINS_SOME = 18;
  /** RegularExpression Id. */
  int CONTAINS = 19;
  /** RegularExpression Id. */
  int CONTAINS_SOME_KEYS = 20;
  /** RegularExpression Id. */
  int CONTAINS_KEYS = 21;
  /** RegularExpression Id. */
  int CONTAINS_SOME_VALUES = 22;
  /** RegularExpression Id. */
  int CONTAINS_VALUES = 23;
  /** RegularExpression Id. */
  int CASE_INSENSITIVE_MATCH = 24;
  /** RegularExpression Id. */
  int COUNT = 25;
  /** RegularExpression Id. */
  int COUNT_KEYS = 26;
  /** RegularExpression Id. */
  int COUNT_VALUES = 27;
  /** RegularExpression Id. */
  int FIRST_INDEX = 28;
  /** RegularExpression Id. */
  int LAST_INDEX = 29;
  /** RegularExpression Id. */
  int ADD = 30;
  /** RegularExpression Id. */
  int REMOVE = 31;
  /** RegularExpression Id. */
  int REMOVE_LAST = 32;
  /** RegularExpression Id. */
  int REMOVE_ALL = 33;
  /** RegularExpression Id. */
  int GET = 34;
  /** RegularExpression Id. */
  int POST = 35;
  /** RegularExpression Id. */
  int SUM = 36;
  /** RegularExpression Id. */
  int AVG = 37;
  /** RegularExpression Id. */
  int MAX = 38;
  /** RegularExpression Id. */
  int MIN = 39;
  /** RegularExpression Id. */
  int STD_DEV = 40;
  /** RegularExpression Id. */
  int AVG_DIFF = 41;
  /** RegularExpression Id. */
  int AVG_SQR_DIFF = 42;
  /** RegularExpression Id. */
  int HISTO = 43;
  /** RegularExpression Id. */
  int TOP = 44;
  /** RegularExpression Id. */
  int BOTTOM = 45;
  /** RegularExpression Id. */
  int SORT_ASC = 46;
  /** RegularExpression Id. */
  int SORT_ASC_KEYS = 47;
  /** RegularExpression Id. */
  int SORT_ASC_VALUES = 48;
  /** RegularExpression Id. */
  int SORT_DESC = 49;
  /** RegularExpression Id. */
  int SORT_DESC_KEYS = 50;
  /** RegularExpression Id. */
  int SORT_DESC_VALUES = 51;
  /** RegularExpression Id. */
  int NUM_EVENTS = 52;
  /** RegularExpression Id. */
  int NOW = 53;
  /** RegularExpression Id. */
  int DATE_TO_NUMBER = 54;
  /** RegularExpression Id. */
  int DATE_TO_TIME_WINDOW = 55;
  /** RegularExpression Id. */
  int NUMBER_TO_TIME_WINDOW = 56;
  /** RegularExpression Id. */
  int STRING_TO_NUMBER = 57;
  /** RegularExpression Id. */
  int STRING_TO_BOOLEAN = 58;
  /** RegularExpression Id. */
  int NUMBER_TO_STRING = 59;
  /** RegularExpression Id. */
  int NUMBER_TO_DATE = 60;
  /** RegularExpression Id. */
  int ABS = 61;
  /** RegularExpression Id. */
  int CEIL = 62;
  /** RegularExpression Id. */
  int FLOOR = 63;
  /** RegularExpression Id. */
  int PLUS = 64;
  /** RegularExpression Id. */
  int MINUS = 65;
  /** RegularExpression Id. */
  int MULT = 66;
  /** RegularExpression Id. */
  int DIV = 67;
  /** RegularExpression Id. */
  int INT_DIV = 68;
  /** RegularExpression Id. */
  int MODULO = 69;
  /** RegularExpression Id. */
  int EXP = 70;
  /** RegularExpression Id. */
  int LOG = 71;
  /** RegularExpression Id. */
  int LESS = 72;
  /** RegularExpression Id. */
  int EQUALS = 73;
  /** RegularExpression Id. */
  int NOT_EQUALS = 74;
  /** RegularExpression Id. */
  int GREATER = 75;
  /** RegularExpression Id. */
  int AND = 76;
  /** RegularExpression Id. */
  int OR = 77;
  /** RegularExpression Id. */
  int NOT = 78;
  /** RegularExpression Id. */
  int ELSE = 79;
  /** RegularExpression Id. */
  int EXISTS = 80;
  /** RegularExpression Id. */
  int NOT_NULL = 81;
  /** RegularExpression Id. */
  int NUMBER = 82;
  /** RegularExpression Id. */
  int STRING = 83;
  /** RegularExpression Id. */
  int BOOLEAN = 84;
  /** RegularExpression Id. */
  int NUM = 85;
  /** RegularExpression Id. */
  int PCT = 86;
  /** RegularExpression Id. */
  int IDENTIFIER = 87;
  /** RegularExpression Id. */
  int EVENT = 88;
  /** RegularExpression Id. */
  int LEFT_PARENTHESIS = 89;
  /** RegularExpression Id. */
  int RIGHT_PARENTHESIS = 90;
  /** RegularExpression Id. */
  int LEFT_BRACKET = 91;
  /** RegularExpression Id. */
  int RIGHT_BRACKET = 92;
  /** RegularExpression Id. */
  int LEFT_BRACE = 93;
  /** RegularExpression Id. */
  int RIGHT_BRACE = 94;
  /** RegularExpression Id. */
  int COMMA = 95;
  /** RegularExpression Id. */
  int COLON = 96;
  /** RegularExpression Id. */
  int SEMICOLON = 97;
  /** RegularExpression Id. */
  int NEXT_EVAL = 98;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"\\r\"",
    "\"\\n\"",
    "\"\\t\"",
    "\"\\f\"",
    "\" \"",
    "<token of kind 6>",
    "\"settings\"",
    "\"debug\"",
    "\"recording\"",
    "\"expires\"",
    "\"constants\"",
    "\"variables\"",
    "\"updateRules\"",
    "\"outputRules\"",
    "\"set\"",
    "\"map\"",
    "\"list\"",
    "\"containsSome\"",
    "\"contains\"",
    "\"containsSomeKeys\"",
    "\"containsKeys\"",
    "\"containsSomeValues\"",
    "\"containsValues\"",
    "\"?\"",
    "\"count\"",
    "\"countKeys\"",
    "\"countValues\"",
    "\"firstIndex\"",
    "\"lastIndex\"",
    "\"add\"",
    "\"remove\"",
    "\"removeLast\"",
    "\"removeAll\"",
    "\"get\"",
    "\"post\"",
    "\"sum\"",
    "\"avg\"",
    "\"max\"",
    "\"min\"",
    "\"stdDev\"",
    "\"avgDiff\"",
    "\"avgSqrDiff\"",
    "\"histo\"",
    "\"top\"",
    "\"bottom\"",
    "\"sortAsc\"",
    "\"sortAscKeys\"",
    "\"sortAscValues\"",
    "\"sortDesc\"",
    "\"sortDescKeys\"",
    "\"sortDescValues\"",
    "\"numEvents\"",
    "\"now\"",
    "\"dateToNumber\"",
    "\"dateToTimeWindow\"",
    "\"numberToTimeWindow\"",
    "\"stringToNumber\"",
    "\"stringToBoolean\"",
    "\"numberToString\"",
    "\"numberToDate\"",
    "\"abs\"",
    "\"ceil\"",
    "\"floor\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"//\"",
    "\"%\"",
    "\"^\"",
    "\"log\"",
    "\"< \"",
    "\"=\"",
    "\"~\"",
    "\" >\"",
    "\"&\"",
    "\"|\"",
    "\"!\"",
    "\"else\"",
    "\"exists\"",
    "\"notNull\"",
    "<NUMBER>",
    "<STRING>",
    "<BOOLEAN>",
    "\"num\"",
    "\"pct\"",
    "<IDENTIFIER>",
    "\"@\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\",\"",
    "\":\"",
    "\";\"",
    "\"\\\\\"",
  };

}
