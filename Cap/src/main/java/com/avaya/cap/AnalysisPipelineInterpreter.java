/* Generated By:JavaCC: Do not edit this line. AnalysisPipelineInterpreter.java */
package com.avaya.cap;

import com.avaya.messaging.commons.io.StackTraceLogger;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import java.util.List;
import java.util.ArrayList;

public class AnalysisPipelineInterpreter implements AnalysisPipelineInterpreterConstants {
        private static final Logger LOGGER = Logger.getLogger(AnalysisPipelineInterpreter.class);

        private static final boolean DEBUG = LOGGER.isTraceEnabled();

        private void printMessage(String message, Level logLevel)
        {
                LOGGER.log(logLevel, "Line " + token.beginLine + ", column " + token.beginColumn + ", token \u005c"" + token.image + "\u005c" (" + AnalysisPipelineInterpreterConstants.tokenImage[token.kind] + "): " + message);
        }

        private AnalysisPipeline addAnalysisPipeline(List<AnalysisPipeline>analysisPipelines, Token entityIdToken, Token analysisIdToken)
        {
                final AnalysisPipeline analysisPipeline = new AnalysisPipeline();

                analysisPipelines.add(analysisPipeline);
                analysisPipeline.addEntityId(entityIdToken);
                analysisPipeline.addAnalysisId(analysisIdToken);

                return analysisPipeline;
        }

        public List<AnalysisPipeline> getAnalysisPipelines()
        {
                if (DEBUG)
                        printMessage("Parsing analysis pipelines", Level.TRACE);

                try
                {
                        return parseAnalysisPipelines();
                } catch (Exception e)
                {
                        StackTraceLogger.log("Parsing of analysis pipeline failed", Level.ERROR, e, LOGGER);
                        printMessage("Parsing of analysis pipeline failed", Level.ERROR);
                        return null;
                }
        }

  final private List<AnalysisPipeline> parseAnalysisPipelines() throws ParseException {
        final List<AnalysisPipeline> analysisPipelines = new ArrayList<AnalysisPipeline>();

        AnalysisPipeline analysisPipeline;

        Token entityIdToken,
                  analysisIdToken;
    entityIdToken = jj_consume_token(IDENTIFIER);
    jj_consume_token(COMMA);
    analysisIdToken = jj_consume_token(IDENTIFIER);
                analysisPipeline = addAnalysisPipeline(analysisPipelines, entityIdToken, analysisIdToken);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PIPELINE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(PIPELINE);
      entityIdToken = jj_consume_token(IDENTIFIER);
      jj_consume_token(COMMA);
      analysisIdToken = jj_consume_token(IDENTIFIER);
                        analysisPipeline.addEntityId(entityIdToken);
                        analysisPipeline.addAnalysisId(analysisIdToken);
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(SEMICOLON);
      entityIdToken = jj_consume_token(IDENTIFIER);
      jj_consume_token(COMMA);
      analysisIdToken = jj_consume_token(IDENTIFIER);
                        analysisPipeline = addAnalysisPipeline(analysisPipelines, entityIdToken, analysisIdToken);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PIPELINE:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_3;
        }
        jj_consume_token(PIPELINE);
        entityIdToken = jj_consume_token(IDENTIFIER);
        jj_consume_token(COMMA);
        analysisIdToken = jj_consume_token(IDENTIFIER);
                                analysisPipeline.addEntityId(entityIdToken);
                                analysisPipeline.addAnalysisId(analysisIdToken);
      }
    }
                {if (true) return analysisPipelines;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public AnalysisPipelineInterpreterTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x100,0x400,0x100,};
   }

  /** Constructor with InputStream. */
  public AnalysisPipelineInterpreter(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AnalysisPipelineInterpreter(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AnalysisPipelineInterpreterTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public AnalysisPipelineInterpreter(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalysisPipelineInterpreterTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public AnalysisPipelineInterpreter(AnalysisPipelineInterpreterTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AnalysisPipelineInterpreterTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[11];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 11; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
